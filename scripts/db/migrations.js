import { supabaseAdmin } from '../../src/lib/supabase.js';

export async function createTagsTables() {
  try {
    // Создаем таблицу тегов
    const { error: tagsError } = await supabaseAdmin.rpc('exec_sql', {
      sql: `
        create table if not exists tags (
          id bigint generated by default as identity primary key,
          name text not null unique,
          created_at timestamp with time zone default timezone('utc'::text, now()) not null
        );

        create table if not exists client_tags (
          client_id bigint references clients(id) on delete cascade,
          tag_id bigint references tags(id) on delete cascade,
          created_at timestamp with time zone default timezone('utc'::text, now()) not null,
          primary key (client_id, tag_id)
        );

        create index if not exists idx_tags_name on tags(name);
        create index if not exists idx_client_tags_client_id on client_tags(client_id);
        create index if not exists idx_client_tags_tag_id on client_tags(tag_id);
      `
    });

    if (tagsError) {
      console.error('Error creating tags tables:', tagsError);
      throw tagsError;
    }

    console.log('Successfully created tags tables and indexes');
    return true;
  } catch (error) {
    console.error('Error creating tags tables:', error);
    throw error;
  }
}

export async function addIsArchivedColumn() {
  try {
    const { error } = await supabaseAdmin.rpc('exec_sql', {
      sql: `
        ALTER TABLE orders 
        ADD COLUMN IF NOT EXISTS is_archived boolean DEFAULT false;
        
        CREATE INDEX IF NOT EXISTS idx_orders_is_archived 
        ON orders(is_archived);
      `
    });

    if (error) {
      console.error('Error adding is_archived column:', error);
      throw error;
    }

    console.log('Successfully added is_archived column to orders table');
    return true;
  } catch (error) {
    console.error('Error in addIsArchivedColumn:', error);
    throw error;
  }
}
