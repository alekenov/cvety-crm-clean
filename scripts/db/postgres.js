import pkg from 'pg';
const { Pool } = pkg;

const pool = new Pool({
  connectionString: 'postgresql://postgres.tbjozecglteemnrbtjsb:wawpep-3pabBe-fyzmaz@aws-0-eu-central-1.pooler.supabase.com:6543/postgres'
});

export async function createTagsTables() {
  const client = await pool.connect();
  try {
    await client.query('BEGIN');

    // Создаем таблицу клиентов, если она еще не существует
    await client.query(`
      CREATE TABLE IF NOT EXISTS clients (
        id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        name text NOT NULL,
        phone text NOT NULL UNIQUE,
        email text,
        created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
        updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
      );
    `);

    // Создаем таблицу тегов
    await client.query(`
      CREATE TABLE IF NOT EXISTS tags (
        id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        name text NOT NULL UNIQUE,
        created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
      );
    `);

    // Создаем таблицу для связи клиентов с тегами
    await client.query(`
      CREATE TABLE IF NOT EXISTS client_tags (
        client_id bigint REFERENCES clients(id) ON DELETE CASCADE,
        tag_id bigint REFERENCES tags(id) ON DELETE CASCADE,
        created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
        PRIMARY KEY (client_id, tag_id)
      );
    `);

    // Создаем индексы
    await client.query(`
      CREATE INDEX IF NOT EXISTS idx_clients_phone ON clients(phone);
      CREATE INDEX IF NOT EXISTS idx_clients_name ON clients(name);
      CREATE INDEX IF NOT EXISTS idx_tags_name ON tags(name);
      CREATE INDEX IF NOT EXISTS idx_client_tags_client_id ON client_tags(client_id);
      CREATE INDEX IF NOT EXISTS idx_client_tags_tag_id ON client_tags(tag_id);
    `);

    await client.query('COMMIT');
    console.log('Successfully created clients and tags tables and indexes');
  } catch (error) {
    await client.query('ROLLBACK');
    console.error('Error creating tables:', error);
    throw error;
  } finally {
    client.release();
  }
}
